from functools import lru_cache

def moves(h):
    a,b,c=h
    return (a+3,b,c),(a,b+3,c),(a,b,c+3),(a+13,b,c),(a,b+13,c),(a,b,c+13),(a+23,b,c),(a,b+23,c),(a,b,c+23),
@lru_cache((None))
def game(h):
    if h[0]<=1 or h[1]<=1:
        return
    if sum(h)>=73:
        return 'Win'
    if any(game(m)=='Win' for m in moves(h)):
        return 'P1'
    if all(game(m)=='P1' for m in moves(h)):
        return 'B1'
    if any(game(m)=='B1' for m in moves(h)):
        return 'P2'
    if all(game(m)=='P1' or game(m)=='P2'for m in moves(h)):
        return 'B2'
for s in range(1,24):
    if  game((2,s,2*s)) is not None:
        print(s,game((2,s,2*s)))
